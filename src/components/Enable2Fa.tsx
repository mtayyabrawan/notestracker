import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import type { OTPSchema } from "../schemas/otpSchema";
import otpSchema from "../schemas/otpSchema";
import twofaAPI from "../api/2fa.api";
import { IconCopy } from "@tabler/icons-react";
import { useRef } from "react";

function Enable2Fa({
  handleModal,
  secret,
  qrcode,
}: {
  handleModal: () => void;
  secret: string;
  qrcode: string;
}) {
  const {
    register,
    handleSubmit,
    setValue,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<OTPSchema>({
    resolver: zodResolver(otpSchema),
  });

  async function formSubmit(data: OTPSchema) {
    const response = await twofaAPI.verify2FA(
      `${data["1"]}${data["2"]}${data["3"]}${data["4"]}${data["5"]}${data["6"]}`,
    );
    reset();
    if (!response.resStatus) {
      toast.error(response.error);
      return;
    }
    toast.success("Two Factor Authentication turned on");
    handleModal();
  }

  function updateFocus(e: React.InputEvent<HTMLInputElement>) {
    if (e.currentTarget.value.length > 1) {
      e.currentTarget.value = e.currentTarget.value.slice(0, 1);
    }
    const nextInput = e.currentTarget.nextElementSibling;
    if (e.currentTarget.value.length === 1) {
      if (nextInput) {
        (nextInput as HTMLInputElement).focus();
        return;
      }
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    e.stopPropagation();
    if (e.key === "Backspace" && e.currentTarget.value.length === 0) {
      const prevInput = e.currentTarget.previousElementSibling;
      if (prevInput) {
        (prevInput as HTMLInputElement).focus();
      }
    }
  }

  function handlePaste(e: React.ClipboardEvent<HTMLInputElement>) {
    const verifyBtn = document.querySelector(
      "button[type='submit']",
    ) as HTMLButtonElement;
    e.preventDefault();
    const pastedData = e.clipboardData.getData("text");
    if (pastedData.length === 6 && /^\d+$/.test(pastedData)) {
      [...pastedData].forEach((char, index) => {
        setValue(`${index + 1}` as keyof OTPSchema, Number(char));
      });
      verifyBtn.focus();
      verifyBtn.click();
    }
  }

  const secretRef = useRef<HTMLInputElement>(null);

  function copySecret() {
    if (secretRef.current) secretRef.current.select();
    document.execCommand("copy");
    toast.info("Copied!");
  }

  return (
    <div className="fixed top-0 left-1/2 z-50 h-full w-full max-w-[1540px] -translate-x-1/2 bg-neutral-100/30 backdrop-blur-[1px]">
      <form
        className="mx-auto mt-5 w-96 space-y-6 rounded-lg bg-neutral-200 p-4 text-sm shadow-[0px_0px_10px_0px_var(--color-neutral-500)] ring-[0.5px] ring-neutral-900"
        noValidate
        onSubmit={handleSubmit(formSubmit)}
      >
        <h1 className="text-center text-lg font-medium">Verify 2FA</h1>
        <div className="w-full space-y-2">
          <img src={qrcode} alt="qrcode" className="mx-auto block h-36" />
          <p className="text-center text-xs text-neutral-500">
            Scan Qrcode using your authenticator app
          </p>
        </div>
        <div className="flex w-full items-center justify-center gap-2">
          <input
            ref={secretRef}
            type="text"
            readOnly
            value={secret}
            className="block w-[75%] rounded-md bg-neutral-400 p-2 text-xs ring-[1px] focus-visible:outline-hidden"
          />
          <button
            type="button"
            onClick={copySecret}
            className="cursor-pointer rounded-md bg-white px-2 py-1.5 focus-visible:outline-hidden"
          >
            <IconCopy size={18} />
          </button>
        </div>
        <p className="my-3 px-1.5 text-sm">
          Enter a 6-digit login code generated by your authentication app
        </p>
        <div className="mx-auto my-6 grid w-[95%] grid-cols-6 grid-rows-1 gap-2">
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("1", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["1"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("2", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["2"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("3", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["3"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("4", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["4"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("5", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["5"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
          <input
            onInput={updateFocus}
            onKeyDown={handleKeyDown}
            onPaste={handlePaste}
            type="number"
            maxLength={1}
            inputMode="numeric"
            autoComplete="off"
            {...register("6", { valueAsNumber: true })}
            className={`w-full rounded-md p-1.5 text-center ring-[0.5px] ring-neutral-900 focus-visible:shadow-[0px_0px_8px_0px_var(--color-neutral-700)] focus-visible:outline-hidden ${errors["6"] ? "ring-red-500" : "ring-neutral-900"}`}
          />
        </div>
        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full cursor-pointer rounded-md bg-neutral-700 p-2 text-white shadow-[0px_0px_5px_0px_var(--color-neutral-700)] hover:bg-neutral-800 focus-visible:outline-hidden disabled:animate-pulse disabled:cursor-not-allowed disabled:bg-neutral-500"
        >
          Verify
        </button>
      </form>
    </div>
  );
}

export default Enable2Fa;
